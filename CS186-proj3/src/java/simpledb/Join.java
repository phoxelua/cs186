package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */

    private JoinPredicate jpred;
    private DbIterator child1;
    private DbIterator child2;

    private Tuple kid1Tup= null; // how we remember previous iteration of fetch

    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here.
        this.jpred = p;
        this.child1 = child1;
        this.child2 = child2;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return jpred;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return child1.getTupleDesc().getFieldName(getJoinPredicate().getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return child2.getTupleDesc().getFieldName(getJoinPredicate().getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        child1.open();
        child2.open();
        super.open();
    }

    public void close() {
        // some code goes here
        super.close();
        child1.close();
        child2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        child1.rewind();
        child2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        /**
        * Approach: for each child1 tuple, loop over child2 till we find one that matches predicate.
        * Matches are returned as merged tuples.
        * When we run out of child2 tuples, rewind child2 and advance one child1
        * kid1Tup is the tuple from our previous iteration. Untill we run out of child2, this is
        * our "current" child1 tuple
        */

        //for each child1
        while (kid1Tup != null || child1.hasNext()){
            //First call to fetchNext
            if (kid1Tup == null) kid1Tup = child1.next();

            //for each child2
            while(child2.hasNext()){
                Tuple kid2Tup = child2.next();
                if (getJoinPredicate().filter(kid1Tup, kid2Tup)){
                    Tuple mergedTuple = new Tuple(TupleDesc.merge(kid1Tup.getTupleDesc(),kid2Tup.getTupleDesc()));
                    int realIndex = 0; 
                    for(int i=0; i<kid1Tup.getTupleDesc().numFields(); i++){
                        mergedTuple.setField(i, kid1Tup.getField(i)); //populate with kid1
                        realIndex++;
                    }
                    for (int i=0 ; i < kid2Tup.getTupleDesc().numFields();i++){
                        mergedTuple.setField(realIndex, kid2Tup.getField(i)); //populate with kid2
                        realIndex++; 
                    }
                    return mergedTuple;
                }
            }

            //No more child2, got to next child1 and repeat (return null if no more child1)
            child2.rewind();
            if (child1.hasNext()) {kid1Tup = child1.next();}
            else {break;} //jump to return null
        }


        return null; //both child1 and child2 have nothing left
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        return new DbIterator[] {this.child1, this.child2};
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
        this.child1 = children[0];
        this.child2 = children[1];
    }

}
